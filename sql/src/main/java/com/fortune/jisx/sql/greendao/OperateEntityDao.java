package com.fortune.jisx.sql.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATE_ENTITY".
*/
public class OperateEntityDao extends AbstractDao<OperateEntity, Long> {

    public static final String TABLENAME = "OPERATE_ENTITY";

    /**
     * Properties of entity OperateEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "userCode", false, "USER_CODE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Model = new Property(3, String.class, "model", false, "MODEL");
        public final static Property Sdk = new Property(4, int.class, "sdk", false, "SDK");
        public final static Property Imei = new Property(5, String.class, "imei", false, "IMEI");
        public final static Property SystemVersion = new Property(6, String.class, "systemVersion", false, "SYSTEM_VERSION");
        public final static Property CreateTime = new Property(7, java.util.Date.class, "createTime", false, "CREATE_TIME");
    }


    public OperateEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OperateEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_CODE\" TEXT," + // 1: userCode
                "\"CONTENT\" TEXT," + // 2: content
                "\"MODEL\" TEXT," + // 3: model
                "\"SDK\" INTEGER NOT NULL ," + // 4: sdk
                "\"IMEI\" TEXT," + // 5: imei
                "\"SYSTEM_VERSION\" TEXT," + // 6: systemVersion
                "\"CREATE_TIME\" INTEGER);"); // 7: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OperateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(4, model);
        }
        stmt.bindLong(5, entity.getSdk());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(6, imei);
        }
 
        String systemVersion = entity.getSystemVersion();
        if (systemVersion != null) {
            stmt.bindString(7, systemVersion);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OperateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(4, model);
        }
        stmt.bindLong(5, entity.getSdk());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(6, imei);
        }
 
        String systemVersion = entity.getSystemVersion();
        if (systemVersion != null) {
            stmt.bindString(7, systemVersion);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OperateEntity readEntity(Cursor cursor, int offset) {
        OperateEntity entity = new OperateEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // model
            cursor.getInt(offset + 4), // sdk
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imei
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // systemVersion
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OperateEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSdk(cursor.getInt(offset + 4));
        entity.setImei(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSystemVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OperateEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OperateEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OperateEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
