package com.fortune.jisx.sql.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_ENTITY".
*/
public class DownloadEntityDao extends AbstractDao<DownloadEntity, Long> {

    public static final String TABLENAME = "DOWNLOAD_ENTITY";

    /**
     * Properties of entity DownloadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property ReadLength = new Property(2, Long.class, "readLength", false, "READ_LENGTH");
        public final static Property TotalLength = new Property(3, Long.class, "TotalLength", false, "TOTAL_LENGTH");
        public final static Property Hash = new Property(4, String.class, "hash", false, "HASH");
    }


    public DownloadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"READ_LENGTH\" INTEGER," + // 2: readLength
                "\"TOTAL_LENGTH\" INTEGER," + // 3: TotalLength
                "\"HASH\" TEXT);"); // 4: hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        Long readLength = entity.getReadLength();
        if (readLength != null) {
            stmt.bindLong(3, readLength);
        }
 
        Long TotalLength = entity.getTotalLength();
        if (TotalLength != null) {
            stmt.bindLong(4, TotalLength);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(5, hash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        Long readLength = entity.getReadLength();
        if (readLength != null) {
            stmt.bindLong(3, readLength);
        }
 
        Long TotalLength = entity.getTotalLength();
        if (TotalLength != null) {
            stmt.bindLong(4, TotalLength);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(5, hash);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadEntity readEntity(Cursor cursor, int offset) {
        DownloadEntity entity = new DownloadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // readLength
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // TotalLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // hash
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReadLength(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTotalLength(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setHash(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
