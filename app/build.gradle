apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def getConfigs(environment, fileName) {
    //断言变量不为空
    assert environment != null
    assert fileName != null
    Properties props = new Properties()
    //加载文件内容为 Properties，方便使用
    props.load(new FileInputStream(file("config/$environment/$fileName")))
    return props
}

def valueType(value) {
    if (value.class == Integer) {
        return "Integer"
    } else {
        return "String"
    }
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    /*默认配置*/
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.versionName
        versionCode rootProject.ext.versionCode

        applicationId rootProject.ext.applicationId
        multiDexEnabled true
    }

    /*渠道配置--理解为维度*/
    flavorDimensions "channel"

    productFlavors {
        /*应用宝*/
        tencent {
            dimension "channel"
        }
    }

    productFlavors.all {
        flavor ->
            def props = getConfigs(name, 'config.properties')
            props.propertyNames().each { name ->
                buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
            }
    }

    /*签名配置*/
    signingConfigs {
        debug {
            keyAlias rootProject.RELEASE_KEY_ALIAS
            keyPassword rootProject.RELEASE_KEY_PASSWORD
            storeFile file(rootProject.RELEASE_STORE_FILE)
            storePassword rootProject.RELEASE_STORE_PASSWORD
        }
        release {
            keyAlias rootProject.RELEASE_KEY_ALIAS
            keyPassword rootProject.RELEASE_KEY_PASSWORD
            storeFile file(rootProject.RELEASE_STORE_FILE)
            storePassword rootProject.RELEASE_STORE_PASSWORD
        }
    }

    buildTypes {
        release {
            //Zipalign优化
            //是否混淆
            minifyEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //Zipalign优化
            zipAlignEnabled true
            //关闭动态调试
            debuggable false
            //签名
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 输出配置
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    outputFileName = "${variant.buildType.name}-V${defaultConfig.versionName}_${releaseTime()}.apk"
                }
            }
        }

        debug {
            versionNameSuffix "-debug"
            //是否混淆
            minifyEnabled false
            //移除无用的resource文件
            shrinkResources false
            //Zipalign优化
            zipAlignEnabled false
            //动态调试
            debuggable true
            //签名
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude '*.apk'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    /*忽略编译过程中的lint报错*/
    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':view')

    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

}
